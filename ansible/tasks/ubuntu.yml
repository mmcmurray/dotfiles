---
  - name: Update packages
    apt: upgrade=yes update_cache=yes
    become: yes
    tags:
      - packages

  - name: Install default packages
    apt: name={{ item }} state=latest
    with_items: "{{ packages }}"
    become: yes
    tags:
      - packages

  - name: Install utility packages
    apt: name={{ item }} state=latest
    with_items: "{{ extra_packages }}"
    become: yes
    tags:
      - packages
      - utilities

  - name: Update pip to latest
    shell: 'pip install --upgrade pip'
    become: no
    tags: pip

  - name: Install Python packages
    pip: name={{ item }} state=latest
    with_items:
      - pysphere
      - PyYAML
      - awscli  # Needed for AWS CLI controls
    become: yes
    tags: 
      - packages
      - pip

#  - name: Install snap packages
#    snap:
#      name: "{{ item }}"
#      state: latest
#    with_items: "{{ snap_packages }}"
#    become: yes
#    tags:
#      - packages
#      - snaps

#  - name: Install snap packages with classic
#    snap: name={{ item }} state=latest
#    with_items: "{{ snap_packages_classic }}"
#    become: yes
#    classic: yes
#    tags:
#      - packages
#      - snaps
#      - classic

# Git repos dir
  - name: Create git repos dir
    file:
      dest: "{{ current_user_home }}/repos/git"
      state: directory
    tags: dir

# Zsh
  - name: Install Zsh
    apt:
      name: "{{ item }}"
      state: latest
    with_items:
      - zsh
      - zsh-doc
    become: yes
    tags: ["zsh", "packages"]

  - name: Init and update submodules
    shell: git submodule update --init --recursive
    args:
      chdir: "{{ current_user_home }}/.dotfiles"
    tags: dotfiles

# Sensors
  - name: Install lm-sensors
    apt:
      name: lm-sensors
      state: latest
    become: yes
    tags: ["sensors","packages"]
    when: ansible_virtualization_role == "host"

  - name: Detect sensors
    shell: sensors-detect
    become: yes
    tags: sensors
    when: ansible_virtualization_role == "host"

  - name: View sensors
    shell: sensors
    register: sensors_output
    tags: sensors
    when: ansible_virtualization_role == "host"

  - name: Show sensors data
    debug: var=sensors_output
    tags: sensors

  - name: Add Psensor ppa
    shell: 'apt-add-repository -y ppa:jfi/ppa'
    become: yes
    tags: sensors
    when: ansible_virtualization_role == "host" and ansible_distribution_version == "16.04"

  - name: Install Psensor
    apt:
      update_cache: yes
      name: psensor
      state: latest
    become: yes
    tags: ["sensors", "packages"]
    when: ansible_virtualization_role == "host"

# tmux plugin manager
  - name: Clone tpm repo
    git:
      repo: https://github.com/tmux-plugins/tpm
      dest: "{{ current_user_home }}/.tmux/plugins/tpm"
      accept_hostkey: yes
      update: yes
    tags: ["tmux","tpm"]

# Dropbox
#  - name: Install Dropbox
#    apt:
#      name: "{{ item }}"
#      state: latest
#    with_items:
#      - dropbox
#      - nemo-dropbox
#    become: yes
#    tags: ["dropbox","packages"]

# Terraform
#  - name: Download Terraform
#    get_url:
#      url: https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip
#      dest: "{{ current_user_home }}/Downloads"
#    register: terraform_archive
#    tags: terraform

#  - name: Ensure /opt/terraform
#    file:
#      state: directory
#      path: /opt/terraform
#    become: yes
#    register: terraform
#    tags: terraform

#  - name: Unarchive Terraform
#    unarchive:
#      src: "{{ terraform_archive.dest }}"
#      dest: "{{ terraform.path }}"
#    become: yes
#    tags: terraform